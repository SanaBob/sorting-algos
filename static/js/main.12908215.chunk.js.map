{"version":3,"sources":["App.tsx","index.tsx"],"names":["numCols","promiseArray","arrayHolder","delay","generateRandomArray","array","i","push","Math","floor","random","App","useState","setArray","mergeSortHelper","start","end","mid","merge","left","slice","right","j","k","length","animateColor","animateMerge","Promise","resolve","setTimeout","then","splice","quickSortHelper","pivot","partition","swap","animateThreeColors","animateSwap","temp","heapSortHelper","heapify","n","largest","arrayBarStyle","Array","from","document","getElementsByClassName","style","backgroundColor","newArray","bar1","bar2","endAnimation","onClick","generateEmptyArray","minIndex","all","selectionSort","sorted","bubbleSort","insertionSort","mergeSort","quickSort","heapSort","className","map","value","index","position","top","width","height","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.12908215.chunk.js","sourcesContent":["import { resolve } from 'path';\nimport React, { useState } from 'react';\nimport './App.css';\n\nconst numCols = 30;\nconst delayMultiplier = 50;\nlet promiseArray: any = [];\nlet arrayHolder: any = [];\nlet delay = 0;\n\nconst generateRandomArray = () => {\n  const array = [];\n  for (let i = 0; i < numCols; i++) {\n    array.push(Math.floor(Math.random() * 501));\n  }\n  return array;\n}\n\nconst generateEmptyArray = () => {\n  const array = [];\n  for (let i = 0; i < numCols; i++) {\n    array.push(0);\n  }\n  return array;\n}\n\n\nconst App = () => {\n\n  const [array, setArray] = useState(generateRandomArray());\n\n  const selectionSort = (array: any) => {\n    let newArray = array.slice();\n    for (let i = 0; i < newArray.length; i++) {\n      let minIndex = i;\n      for (let j = i + 1; j < newArray.length; j++) {\n        promiseArray.push(animateColor(i, j));\n        if (newArray[j] < newArray[minIndex]) {\n          minIndex = j;\n        }\n      }\n\n      newArray = swap(newArray, i, minIndex);\n      arrayHolder.push(newArray.slice());\n      promiseArray.push(animateSwap(newArray, i, minIndex));\n    }\n    promiseArray.push(endAnimation());\n    Promise.all(promiseArray).then(() => { promiseArray = []; delay = 0; });\n  }\n\n  const bubbleSort = (array: any) => {\n    let newArray = array.slice();\n    let sorted = false;\n    for (let i = 0; i < newArray.length; i++) {\n      sorted = true;\n      for (let j = 0; j < newArray.length - 1; j++) {\n        promiseArray.push(animateColor(j, j + 1));\n        if (newArray[j] > newArray[j + 1]) {\n          newArray = swap(newArray, j, j + 1);\n          arrayHolder.push(newArray.slice());\n          promiseArray.push(animateSwap(newArray, j, j + 1));\n          sorted = false;\n        }\n      }\n      if (sorted) {\n        break;\n      }\n    }\n    promiseArray.push(endAnimation());\n    Promise.all(promiseArray).then(() => { promiseArray = []; delay = 0; });\n  }\n\n  const insertionSort = (array: any) => {\n    let newArray = array.slice();\n    for (let i = 1; i < newArray.length; i++) {\n      let j = i;\n      while (j > 0 && newArray[j] < newArray[j - 1]) {\n        promiseArray.push(animateColor(j, j - 1));\n        newArray = swap(newArray, j, j - 1);\n        arrayHolder.push(newArray.slice());\n        promiseArray.push(animateSwap(newArray, j, j - 1));\n        j--;\n      }\n    }\n    promiseArray.push(endAnimation());\n    Promise.all(promiseArray).then(() => { promiseArray = []; delay = 0; });\n  }\n\n  const mergeSort = (array: any) => {\n    let newArray = array.slice();\n    mergeSortHelper(newArray, 0, newArray.length - 1);\n    promiseArray.push(endAnimation());\n    Promise.all(promiseArray).then(() => { promiseArray = []; delay = 0; });\n  }\n\n  const mergeSortHelper = (array: any, start: number, end: number) => {\n    if (start < end) {\n      let mid = Math.floor((start + end) / 2);\n      mergeSortHelper(array, start, mid);\n      mergeSortHelper(array, mid + 1, end);\n      merge(array, start, mid, end);\n    }\n  }\n\n  const merge = (array: any, start: number, mid: number, end: number) => {\n    let left = array.slice(start, mid + 1);\n    let right = array.slice(mid + 1, end + 1);\n    let i = 0;\n    let j = 0;\n    let k = start;\n    while (i < left.length && j < right.length) {\n      if (left[i] < right[j]) {\n        array[k] = left[i];\n        i++;\n      } else {\n        array[k] = right[j];\n        j++;\n      }\n      k++;\n      if (k < numCols) promiseArray.push(animateColor(k-1, k));\n      arrayHolder.push(array.slice());\n      promiseArray.push(animateMerge());\n    }\n    while (i < left.length) {\n      array[k] = left[i];\n      i++;\n      k++;\n      if (k < numCols) promiseArray.push(animateColor(k-1, k));\n      arrayHolder.push(array.slice());\n      promiseArray.push(animateMerge());\n    }\n    while (j < right.length) {\n      array[k] = right[j];\n      j++;\n      k++;\n      if (k < numCols) promiseArray.push(animateColor(k-1, k));\n      arrayHolder.push(array.slice());\n      promiseArray.push(animateMerge());\n    }\n  }\n\n  const animateMerge = () => {\n    delay += delayMultiplier;\n    return new Promise(resolve => setTimeout(resolve, delay)).then(() => {\n      setArray(arrayHolder[0]);\n      arrayHolder.splice(0, 1);\n    })\n  }\n\n  const quickSort = (array: any) => {\n    let newArray = array.slice();\n    quickSortHelper(newArray, 0, newArray.length - 1);\n    promiseArray.push(endAnimation());\n    Promise.all(promiseArray).then(() => { promiseArray = []; delay = 0; });\n  }\n\n  const quickSortHelper = (array: any, start: number, end: number) => {\n    if (start < end) {\n      let pivot = partition(array, start, end);\n      quickSortHelper(array, start, pivot - 1);\n      quickSortHelper(array, pivot + 1, end);\n    }\n  }\n\n  const partition = (array: any, start: number, end: number) => {\n    let pivot = array[end];\n    let i = start - 1;\n    for (let j = start; j < end; j++) {\n      if (array[j] <= pivot) {\n        i++;\n        array = swap(array, i, j);\n        animateThreeColors(i, j, end);\n        arrayHolder.push(array.slice());\n        promiseArray.push(animateSwap(array, i, j));\n      }\n    }\n    array = swap(array, i + 1, end);\n    animateColor(i + 1, end);\n    arrayHolder.push(array.slice());\n    promiseArray.push(animateSwap(array, i + 1, end));\n    return i + 1;\n  }\n\n  const swap = (array: number[], i: number, j: number) => {\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return array;\n  }\n\n  const heapSort = (array: any) => {\n    let newArray = array.slice();\n    heapSortHelper(newArray);\n    promiseArray.push(endAnimation());\n    Promise.all(promiseArray).then(() => { promiseArray = []; delay = 0; });\n  }\n\n  const heapSortHelper = (array: any) => {\n    for (let i = Math.floor(array.length / 2); i >= 0; i--) {\n      heapify(array, i, array.length);\n    }\n    for (let i = array.length - 1; i >= 0; i--) {\n      array = swap(array, 0, i);\n      arrayHolder.push(array.slice());\n      promiseArray.push(animateSwap(array, 0, i));\n      heapify(array, 0, i);\n    }\n  }\n\n  const heapify = (array: any, i: number, n: number) => {\n    let largest = i;\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n    if (left < n && array[left] > array[largest]) {\n      largest = left;\n    }\n    if (right < n && array[right] > array[largest]) {\n      largest = right;\n    }\n    if (largest !== i) {\n      array = swap(array, i, largest);\n      animateColor(i, largest);\n      arrayHolder.push(array.slice());\n      promiseArray.push(animateSwap(array, i, largest));\n      heapify(array, largest, n);\n    }\n  }\n\n  const animateThreeColors = (i: number, j: number, k: number) => {\n    delay += delayMultiplier;\n    return new Promise(resolve => setTimeout(resolve, delay)).then(() => {\n      const arrayBarStyle = Array.from(document.getElementsByClassName('array-bar') as HTMLCollectionOf<HTMLElement>)\n      for (const h of arrayBarStyle) {\n        h.style.backgroundColor = 'cyan';\n      }\n      const bar1 = arrayBarStyle[i];\n      bar1.style.backgroundColor = 'lime';\n      const bar2 = arrayBarStyle[j];\n      bar2.style.backgroundColor = 'lime';\n      const bar3 = arrayBarStyle[k];\n      bar3.style.backgroundColor = 'darkgreen';\n    })\n  }\n\n  const animateColor = (i: number, j: number) => {\n    delay += delayMultiplier;\n    return new Promise(resolve => setTimeout(resolve, delay)).then(() => {\n      const arrayBarStyle = Array.from(document.getElementsByClassName('array-bar') as HTMLCollectionOf<HTMLElement>)\n      for (const h of arrayBarStyle) {\n        h.style.backgroundColor = 'cyan';\n      }\n      const bar1 = arrayBarStyle[i];\n      bar1.style.backgroundColor = 'lime';\n      const bar2 = arrayBarStyle[j];\n      bar2.style.backgroundColor = 'lime';\n    })\n  }\n\n  const animateSwap = (newArray: number[], i: number, j: number) => {\n    delay += delayMultiplier;\n    return new Promise(resolve => setTimeout(resolve, delay)).then(() => {\n      const arrayBarStyle = Array.from(document.getElementsByClassName('array-bar') as HTMLCollectionOf<HTMLElement>)\n      const bar1 = arrayBarStyle[i];\n      const bar2 = arrayBarStyle[j];\n      bar1.style.backgroundColor = 'red';\n      bar2.style.backgroundColor = 'red';\n      setArray(arrayHolder[0]);\n      arrayHolder.splice(0, 1);\n      resolve();\n    })\n  }\n\n  const endAnimation = () => {\n    delay += delayMultiplier;\n    return new Promise(resolve => setTimeout(resolve, delay)).then(() => {\n      const arrayBarStyle = Array.from(document.getElementsByClassName('array-bar') as HTMLCollectionOf<HTMLElement>)\n      for (const i of arrayBarStyle) {\n        i.style.backgroundColor = 'cyan';\n      }\n    })\n  }\n\n  return (\n    <>\n      <button onClick={() => setArray(generateEmptyArray())}>\n        Clear\n      </button>\n      <button onClick={() => setArray(generateRandomArray())}>\n        Random\n      </button>\n      <button onClick={() => selectionSort(array)}>\n        Selection Sort\n      </button>\n      <button onClick={() => bubbleSort(array)}>\n        Bubble Sort\n      </button>\n      <button onClick={() => insertionSort(array)}>\n        Insertion Sort\n      </button>\n      <button onClick={() => mergeSort(array)}>\n        Merge Sort\n      </button>\n      <button onClick={() => quickSort(array)}>\n        Quick Sort\n      </button>\n      <button onClick={() => heapSort(array)}>\n        Heap Sort\n      </button>\n      <div className=\"App\">\n        <div className=\"array-container\">\n          {array.map((value, index) => (\n            <div\n              className='array-bar'\n              key={index}\n              style={{\n                position: 'relative',\n                top: `${510 - value}px`,\n                width: `${88 / numCols}%`,\n                height: `${value}px`,\n              }}>\n              {value}\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}